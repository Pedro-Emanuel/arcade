{
    "title": "@146 L3 - Torres de Hanoi",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@146 L3 - Torres de Hanoi</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmp21ff4hwa.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l3---torres-de-hanoi\"><span class=\"citation\"\ndata-cites=\"146\">@146</span> L3 - Torres de Hanoi</h2>\n<p><a\nhref=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/146/solver.c\"></a>\n<img\nsrc=\"https://raw.githubusercontent.com/qxcodefup/arcade/master/base/146/cover.jpg\" /></p>\n<h2 id=\"motiva\u00e7\u00e3o\">Motiva\u00e7\u00e3o</h2>\n<p>O objetivo do jogo das torres de hanoi \u00e9 mover todos os discos da\ntorre inicial para a torre final, sem colocar disco maior sobre disco\nmenor. Inicialmente, a torre final e a torre auxiliar est\u00e3o vazias. Voc\u00ea\npode usar a torre auxiliar para lhe ajudar a mover os discos.</p>\n<h2 id=\"exemplo\">Exemplo</h2>\n<pre><code>            ++                  ++                 ++\n            ||                  ||                 ||\n            ||                  ||                 ||\n            ||                  ||                 ||\n            ||                  ||                 ||\n          +-++-+                ||                 ||\n          |    |                ||                 ||\n        +-+----+-+              ||                 ||\n        |        |              ||                 ||\n      +-+--------+-+            ||                 ||\n      |            |            ||                 ||\n      +------------+            ++                 ++\n      Torre inicial        Torre auxiliar      Torre final\n            A                   B                  C</code></pre>\n<p>Solu\u00e7\u00e3o: A -&gt; C A -&gt; B C -&gt; B A -&gt; C B -&gt; A B -&gt; C\nA -&gt; C</p>\n<p>Simule as jogadas em\nhttp://www.dynamicdrive.com/dynamicindex12/towerhanoi.htm</p>\n<p>Este problema parece dif\u00edcil de resolver para o caso geral com\n<em>n</em> discos. Por\u00e9m, como acontece em v\u00e1rios problemas, utilizando\nrecurs\u00e3o chegamos em um algoritmo simples e elegante. Mova\nrecursivamente os \\(n-1\\) primeiros discos para a torre auxiliar, depois\nmova o \u00faltimo disco da torre inicial para a torre final, e ent\u00e3o mova\nrecursivamente os \\(n-1\\) discos da torre auxiliar para a torre\nfinal.</p>\n<h3 id=\"entrada\">Entrada</h3>\n<ul>\n<li>N\u00famero de discos para mover da torre \u2018A\u2019 para a torre \u2018C\u2019.</li>\n</ul>\n<h3 id=\"sa\u00edda\">Sa\u00edda</h3>\n<ul>\n<li>Sequ\u00eancia de movimentos para mover todos os discos (um movimento por\nlinha).</li>\n<li>Nota\u00e7\u00e3o do movimento do disco no topo da torre:\n<ul>\n<li>torre de origem -&gt; torre de destino.</li>\n</ul></li>\n</ul>\n<h2 id=\"exemplos\">Exemplos</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n3\n========\nA -&gt; C\nA -&gt; B\nC -&gt; B\nA -&gt; C\nB -&gt; A\nB -&gt; C\nA -&gt; C\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n</body>\n</html>\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>>\n3\n========\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n<<<<<<<<\n\n>>>>>>>> 02\n5\n========\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\nA -> B\nC -> B\nC -> A\nB -> A\nC -> B\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\nB -> A\nC -> B\nC -> A\nB -> A\nB -> C\nA -> C\nA -> B\nC -> B\nA -> C\nB -> A\nB -> C\nA -> C\n<<<<<<<<\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": []
}
